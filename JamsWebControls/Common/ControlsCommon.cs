using System;
using System.Collections.Generic;
using System.Diagnostics;
using System.Linq;
using System.Text;
using System.Web.UI;
using System.Web.UI.WebControls;
using AjaxControlToolkit;
using MVPSI.JAMS;
using Enumerable=System.Linq.Enumerable;

namespace MVPSI.JAMSWeb.Controls
{
    /// <summary>
    /// ControlsCommon is the base class for all of the JAMS WebControls.  It provides
    /// some basic helper methods.
    /// </summary>
    public class ControlsCommon : WebControl
    {
        /// <summary>
        /// Default constructor
        /// </summary>
        protected ControlsCommon()
        {
        }

        /// <summary>
        /// Generates a unique ID for a child control.  The baseName of each child must be unique
        /// within the control.  For example, the SubmitMenu control can only have one child control
        /// named "OkButton".  GetChildControlID gets an ID that will be unique on the ASP.Net page.
        /// It does this by combining the ID of the parent control with the base name of the child control.
        /// </summary>
        /// <param name="baseName"></param>
        /// <returns></returns>
        internal string GetChildControlID(string baseName)
        {
            return string.Format("{0}_{1}", this.ID, baseName);
        }

        /// <summary>
        /// Given the full ID of a control, returns the base name
        /// </summary>
        /// <param name="controlID"></param>
        /// <returns></returns>
        internal string GetBaseNameFromID(string controlID)
        {
            string initialPart = this.ID + "_";
            if (controlID.StartsWith(initialPart))
            {
                return controlID.Substring(initialPart.Length);
            }
            else
            {
                throw new ArgumentException("controlID was not generated by GetChildControlID");
            }
        }

        /// <summary>
        /// Add a Regular Expression Validator
        /// </summary>
        /// <param name="id"></param>
        /// <param name="regex"></param>
        /// <param name="message"></param>
        /// <param name="parent"></param>
        internal static RegularExpressionValidator AddRegexValid(string id, string regex, string message, Control parent)
        {
            RegularExpressionValidator v = new RegularExpressionValidator();
            v.ControlToValidate = id;
            v.ValidationExpression = regex;
            v.Text = message;
            v.Display = ValidatorDisplay.Dynamic;
            v.Style["margin"] = "5%";
            parent.Controls.Add(v);
            return v;
        }

        internal RequiredFieldValidator AddRequiredVaild(string id, Control parent)
        {
            RequiredFieldValidator v = new RequiredFieldValidator();
            v.ControlToValidate = id;
            v.Text = "Value is Required";
            v.Display = ValidatorDisplay.Dynamic;
            v.Style["margin"] = "5%";
            parent.Controls.Add(v);
            return v;
        }

        internal void AddRangeValid(string controlId, Submit.Parameter p, TabPanel paramView)
        {
            if (string.IsNullOrEmpty(p.ValidationData))
            {
                return;
            }

            var ranges = p.ValidationData.Split(',');

            if (ranges.Length != 2)
            {
                return;
            }

            var rangeMin = ranges[0];
            var rangeMax = ranges[1];

            var rangeValid = new RangeValidator();
            rangeValid.MinimumValue = rangeMin;
            rangeValid.MaximumValue = rangeMax;
            rangeValid.Text = "Value is not within range.";
            rangeValid.ControlToValidate = controlId;
            rangeValid.Display = ValidatorDisplay.Dynamic;

            paramView.Controls.Add(rangeValid);
        }

    }
}